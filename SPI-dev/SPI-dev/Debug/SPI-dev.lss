
SPI-dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000500  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000414  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019a  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029e  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c1       	rjmp	.+598    	; 0x264 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	c1 c0       	rjmp	.+386    	; 0x20c <__vector_34>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	da d0       	rcall	.+436    	; 0x278 <main>
  c4:	1b c2       	rjmp	.+1078   	; 0x4fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:

void SPI_SlaveReceiveBytes(uint8_t *buffer, uint8_t size) {
	for (int i = 0; i < size; i++) {
		buffer[i] = SPI_SlaveReceive();
	}
}
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_tranceive>:
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SPI_tranceive+0x2>
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <read_data_send_check>:
 * Returns 1 if the communication was successful or 0 if it failed.
 * Ideally we want as few function calls as possible in this method.
 */
void read_data_send_check(void) {
	/* Read Speed byte */
	speed_cm = SPI_tranceive(SPI_NAN);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	f8 df       	rcall	.-16     	; 0xd0 <SPI_tranceive>
  e0:	80 93 02 01 	sts	0x0102, r24
	
	PORTA = 0xEE;
  e4:	8e ee       	ldi	r24, 0xEE	; 238
  e6:	82 b9       	out	0x02, r24	; 2
	
	/* Read Angle byte */
	angle_cm = SPI_tranceive(SPI_NAN);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	f2 df       	rcall	.-28     	; 0xd0 <SPI_tranceive>
  ec:	80 93 01 01 	sts	0x0101, r24

	/* Send CHECK byte */
	check_byte = speed_cm ^ angle_cm;
  f0:	90 91 02 01 	lds	r25, 0x0102
  f4:	89 27       	eor	r24, r25
  f6:	80 93 00 01 	sts	0x0100, r24
	SPI_tranceive(check_byte);	
  fa:	ea cf       	rjmp	.-44     	; 0xd0 <SPI_tranceive>
  fc:	08 95       	ret

000000fe <PWM_init>:
}


void PWM_init() {
	DDRD |= 0xFF;
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
	TCCR1A |=   (1<<WGM11) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 6f       	ori	r24, 0xF2	; 242
 10c:	80 83       	st	Z, r24
	TCCR1B |=   (1<<WGM12) | (1<<WGM13) | (1<<CS10);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	89 61       	ori	r24, 0x19	; 25
 116:	80 83       	st	Z, r24
	ICR1 = F_CPU/50; //19999 ; // 50 hz needed for the motor and controlling servo.
 118:	e6 e8       	ldi	r30, 0x86	; 134
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	9e e4       	ldi	r25, 0x4E	; 78
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24

	NEUTRAL_SPEED = ICR1-1490 ; // pulse width 1.5ms
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	82 5d       	subi	r24, 0xD2	; 210
 12a:	95 40       	sbci	r25, 0x05	; 5
 12c:	90 93 06 01 	sts	0x0106, r25
 130:	80 93 05 01 	sts	0x0105, r24
	acceleration_rate_speed = 1;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	a0 e8       	ldi	r26, 0x80	; 128
 13a:	bf e3       	ldi	r27, 0x3F	; 63
 13c:	80 93 09 01 	sts	0x0109, r24
 140:	90 93 0a 01 	sts	0x010A, r25
 144:	a0 93 0b 01 	sts	0x010B, r26
 148:	b0 93 0c 01 	sts	0x010C, r27
	acceleration_rate_direction = 4;
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 08 01 	sts	0x0108, r25
 154:	80 93 07 01 	sts	0x0107, r24
	NEUTRAL_DIRECTION = ICR1-1430; // pulse width 1,43 
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	86 59       	subi	r24, 0x96	; 150
 15e:	95 40       	sbci	r25, 0x05	; 5
 160:	90 93 04 01 	sts	0x0104, r25
 164:	80 93 03 01 	sts	0x0103, r24
 168:	08 95       	ret

0000016a <initiate_abort_counter>:
 * interrupt from this timer will shut down the engine, preventing crashes if the connection
 * is lost.
 */
void initiate_abort_counter(void)
{
	PRR0 = PRR0 & ~(1 << PRTIM3);	// Enable COUNT3 circuit.
 16a:	e4 e6       	ldi	r30, 0x64	; 100
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 83       	st	Z, r24
	TCCR3A = 0;	// Normal mode.
 174:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = (0 << CS32) | (1 << CS31) | (0 << CS10);	// Prescaler 8 on 1 MHz system clock.
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 = (1 << TOIE3);	// Enable overflow interrupt
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 71 00 	sts	0x0071, r24
 184:	08 95       	ret

00000186 <speed_controller>:

// speeds choses between 0-127 or reversed speeds between 0-(-127),
// OCR1A = 18509(the compare value which is used with the counter ICR1 to create a fast PWM) give neutral speed.
// The highest speed will be reached when the OCR1A = 18219 (when direction = 127) which gives a PWM signal = (2ms high signal from 20 ms).
// for example when speed = 0 so OCR1A = 18600 which will give neutral speed.
void speed_controller(signed char speed) {
 186:	82 3e       	cpi	r24, 0xE2	; 226
 188:	0c f4       	brge	.+2      	; 0x18c <speed_controller+0x6>
 18a:	82 ee       	ldi	r24, 0xE2	; 226
 18c:	68 2f       	mov	r22, r24
 18e:	8f 31       	cpi	r24, 0x1F	; 31
 190:	0c f0       	brlt	.+2      	; 0x194 <speed_controller+0xe>
 192:	6e e1       	ldi	r22, 0x1E	; 30
		if (speed > 30) {
			speed = 30;
		} else if (speed < -30) {
			speed = -30;
		}
		if (speed > 0) {
 194:	16 16       	cp	r1, r22
 196:	14 f4       	brge	.+4      	; 0x19c <speed_controller+0x16>
			if (speed < 108) {
				speed += 20;
 198:	6c 5e       	subi	r22, 0xEC	; 236
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <speed_controller+0x24>
				} else {
				speed = 127;
			}
		} else if (speed < 0) {
 19c:	66 23       	and	r22, r22
 19e:	2c f4       	brge	.+10     	; 0x1aa <speed_controller+0x24>
			if (speed > -109) {
 1a0:	64 39       	cpi	r22, 0x94	; 148
 1a2:	14 f0       	brlt	.+4      	; 0x1a8 <speed_controller+0x22>
				speed -= 20;
 1a4:	64 51       	subi	r22, 0x14	; 20
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <speed_controller+0x24>
			} else {
				speed = -128;
 1a8:	60 e8       	ldi	r22, 0x80	; 128
			}
		}
		
		OCR1A = NEUTRAL_SPEED - (unsigned int)(speed * acceleration_rate_speed);
 1aa:	77 27       	eor	r23, r23
 1ac:	67 fd       	sbrc	r22, 7
 1ae:	70 95       	com	r23
 1b0:	87 2f       	mov	r24, r23
 1b2:	97 2f       	mov	r25, r23
 1b4:	b4 d0       	rcall	.+360    	; 0x31e <__floatsisf>
 1b6:	20 91 09 01 	lds	r18, 0x0109
 1ba:	30 91 0a 01 	lds	r19, 0x010A
 1be:	40 91 0b 01 	lds	r20, 0x010B
 1c2:	50 91 0c 01 	lds	r21, 0x010C
 1c6:	0f d1       	rcall	.+542    	; 0x3e6 <__mulsf3>
 1c8:	7c d0       	rcall	.+248    	; 0x2c2 <__fixunssfsi>
 1ca:	20 91 05 01 	lds	r18, 0x0105
 1ce:	30 91 06 01 	lds	r19, 0x0106
 1d2:	c9 01       	movw	r24, r18
 1d4:	86 1b       	sub	r24, r22
 1d6:	97 0b       	sbc	r25, r23
 1d8:	90 93 89 00 	sts	0x0089, r25
 1dc:	80 93 88 00 	sts	0x0088, r24
 1e0:	08 95       	ret

000001e2 <direction_controller>:
// OCR1B = 18509(the compare value with the counter ICR1 : counter_limit_const counter_limit_const) give neutral direction.
// The far right direction will be near to OCR1B = 18219 (when direction = 127) which gives a PWM signal  = (2ms high signal from 20ms),
// while the far left will be near to OCR1B = 18981 (when direction = -127) which gives a PWM signal  = (1ms high signal from 20ms).	
void direction_controller(signed char direction ) {
	
		OCR1B = NEUTRAL_DIRECTION - (direction * acceleration_rate_direction);
 1e2:	20 91 07 01 	lds	r18, 0x0107
 1e6:	30 91 08 01 	lds	r19, 0x0108
 1ea:	68 2f       	mov	r22, r24
 1ec:	62 03       	mulsu	r22, r18
 1ee:	a0 01       	movw	r20, r0
 1f0:	63 9f       	mul	r22, r19
 1f2:	50 0d       	add	r21, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	80 91 03 01 	lds	r24, 0x0103
 1fa:	90 91 04 01 	lds	r25, 0x0104
 1fe:	84 1b       	sub	r24, r20
 200:	95 0b       	sbc	r25, r21
 202:	90 93 8b 00 	sts	0x008B, r25
 206:	80 93 8a 00 	sts	0x008A, r24
 20a:	08 95       	ret

0000020c <__vector_34>:
}
	

// Lost connection with central module, see comment on initiate_abort_counter
ISR(TIMER3_OVF_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	0b b6       	in	r0, 0x3b	; 59
 218:	0f 92       	push	r0
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	speed_controller(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	a8 df       	rcall	.-176    	; 0x186 <speed_controller>
	direction_controller(0);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	d4 df       	rcall	.-88     	; 0x1e2 <direction_controller>
	PORTA = 0xF1;
 23a:	81 ef       	ldi	r24, 0xF1	; 241
 23c:	82 b9       	out	0x02, r24	; 2
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_3>:


ISR(INT2_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
	
	//Stop button.
	speed_controller(0);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	8a df       	rcall	.-236    	; 0x186 <speed_controller>
	direction_controller(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	b6 df       	rcall	.-148    	; 0x1e2 <direction_controller>
 276:	ff cf       	rjmp	.-2      	; 0x276 <__vector_3+0x12>

00000278 <main>:
}

int main(void) {

	// Stop button configurations.
	EICRA |= 1<<ISC20 | 1<<ISC21;
 278:	e9 e6       	ldi	r30, 0x69	; 105
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	80 83       	st	Z, r24
	EIMSK |= 1<<INT2;
 282:	ea 9a       	sbi	0x1d, 2	; 29
	EIFR |= 1<<INTF2;
 284:	e2 9a       	sbi	0x1c, 2	; 28
	SPI_SlaveInit();
 286:	20 df       	rcall	.-448    	; 0xc8 <SPI_SlaveInit>
	PWM_init();
 288:	3a df       	rcall	.-396    	; 0xfe <PWM_init>
unsigned int counter_limit_const ;
float acceleration_rate_speed ;
unsigned int acceleration_rate_direction;

void init(void) {
	DDRA = 0xFF;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	81 b9       	out	0x01, r24	; 1
	EIMSK |= 1<<INT2;
	EIFR |= 1<<INTF2;
	SPI_SlaveInit();
	PWM_init();
	init();
	initiate_abort_counter();
 28e:	6d df       	rcall	.-294    	; 0x16a <initiate_abort_counter>
	sei();               // Enable global interrupts.
 290:	78 94       	sei

	PORTA = 0xBB; 	
 292:	8b eb       	ldi	r24, 0xBB	; 187
 294:	82 b9       	out	0x02, r24	; 2
	uint8_t spi_rdy = 0;
	uint8_t spi_success = 0;

	uint8_t spi_read = 0;
	
	speed_controller(0);
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	76 df       	rcall	.-276    	; 0x186 <speed_controller>
	direction_controller(0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	a2 df       	rcall	.-188    	; 0x1e2 <direction_controller>
	
	while(1) {
		PORTA = 0xFF;
 29e:	cf ef       	ldi	r28, 0xFF	; 255
 2a0:	c2 b9       	out	0x02, r28	; 2
		
		spi_rdy = 0;
		
		// SPI wait for start byte from central module
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
 2a2:	8e ee       	ldi	r24, 0xEE	; 238
 2a4:	15 df       	rcall	.-470    	; 0xd0 <SPI_tranceive>
		
		
		spi_rdy = 0;
		
		// SPI wait for start byte from central module
		while (spi_rdy == 0) {
 2a6:	8a 3a       	cpi	r24, 0xAA	; 170
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x2a>
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
			
		}

		read_data_send_check();
 2aa:	18 df       	rcall	.-464    	; 0xdc <read_data_send_check>
		
		// Check if communication was a success
		spi_success = SPI_tranceive(SPI_NAN) == SPI_FINISHED;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	10 df       	rcall	.-480    	; 0xd0 <SPI_tranceive>
		
		if (spi_success) {
 2b0:	86 36       	cpi	r24, 0x66	; 102
 2b2:	b1 f7       	brne	.-20     	; 0x2a0 <main+0x28>
			// Update control values
			speed_controller(speed_cm);
 2b4:	80 91 02 01 	lds	r24, 0x0102
 2b8:	66 df       	rcall	.-308    	; 0x186 <speed_controller>
			direction_controller(angle_cm);
 2ba:	80 91 01 01 	lds	r24, 0x0101
 2be:	91 df       	rcall	.-222    	; 0x1e2 <direction_controller>
 2c0:	ef cf       	rjmp	.-34     	; 0x2a0 <main+0x28>

000002c2 <__fixunssfsi>:
 2c2:	70 d0       	rcall	.+224    	; 0x3a4 <__fp_splitA>
 2c4:	88 f0       	brcs	.+34     	; 0x2e8 <__fixunssfsi+0x26>
 2c6:	9f 57       	subi	r25, 0x7F	; 127
 2c8:	90 f0       	brcs	.+36     	; 0x2ee <__fixunssfsi+0x2c>
 2ca:	b9 2f       	mov	r27, r25
 2cc:	99 27       	eor	r25, r25
 2ce:	b7 51       	subi	r27, 0x17	; 23
 2d0:	a0 f0       	brcs	.+40     	; 0x2fa <__fixunssfsi+0x38>
 2d2:	d1 f0       	breq	.+52     	; 0x308 <__fixunssfsi+0x46>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	1a f0       	brmi	.+6      	; 0x2e4 <__fixunssfsi+0x22>
 2de:	ba 95       	dec	r27
 2e0:	c9 f7       	brne	.-14     	; 0x2d4 <__fixunssfsi+0x12>
 2e2:	12 c0       	rjmp	.+36     	; 0x308 <__fixunssfsi+0x46>
 2e4:	b1 30       	cpi	r27, 0x01	; 1
 2e6:	81 f0       	breq	.+32     	; 0x308 <__fixunssfsi+0x46>
 2e8:	77 d0       	rcall	.+238    	; 0x3d8 <__fp_zero>
 2ea:	b1 e0       	ldi	r27, 0x01	; 1
 2ec:	08 95       	ret
 2ee:	74 c0       	rjmp	.+232    	; 0x3d8 <__fp_zero>
 2f0:	67 2f       	mov	r22, r23
 2f2:	78 2f       	mov	r23, r24
 2f4:	88 27       	eor	r24, r24
 2f6:	b8 5f       	subi	r27, 0xF8	; 248
 2f8:	39 f0       	breq	.+14     	; 0x308 <__fixunssfsi+0x46>
 2fa:	b9 3f       	cpi	r27, 0xF9	; 249
 2fc:	cc f3       	brlt	.-14     	; 0x2f0 <__fixunssfsi+0x2e>
 2fe:	86 95       	lsr	r24
 300:	77 95       	ror	r23
 302:	67 95       	ror	r22
 304:	b3 95       	inc	r27
 306:	d9 f7       	brne	.-10     	; 0x2fe <__fixunssfsi+0x3c>
 308:	3e f4       	brtc	.+14     	; 0x318 <__fixunssfsi+0x56>
 30a:	90 95       	com	r25
 30c:	80 95       	com	r24
 30e:	70 95       	com	r23
 310:	61 95       	neg	r22
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	8f 4f       	sbci	r24, 0xFF	; 255
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	08 95       	ret

0000031a <__floatunsisf>:
 31a:	e8 94       	clt
 31c:	09 c0       	rjmp	.+18     	; 0x330 <__floatsisf+0x12>

0000031e <__floatsisf>:
 31e:	97 fb       	bst	r25, 7
 320:	3e f4       	brtc	.+14     	; 0x330 <__floatsisf+0x12>
 322:	90 95       	com	r25
 324:	80 95       	com	r24
 326:	70 95       	com	r23
 328:	61 95       	neg	r22
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	8f 4f       	sbci	r24, 0xFF	; 255
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	99 23       	and	r25, r25
 332:	a9 f0       	breq	.+42     	; 0x35e <__floatsisf+0x40>
 334:	f9 2f       	mov	r31, r25
 336:	96 e9       	ldi	r25, 0x96	; 150
 338:	bb 27       	eor	r27, r27
 33a:	93 95       	inc	r25
 33c:	f6 95       	lsr	r31
 33e:	87 95       	ror	r24
 340:	77 95       	ror	r23
 342:	67 95       	ror	r22
 344:	b7 95       	ror	r27
 346:	f1 11       	cpse	r31, r1
 348:	f8 cf       	rjmp	.-16     	; 0x33a <__floatsisf+0x1c>
 34a:	fa f4       	brpl	.+62     	; 0x38a <__floatsisf+0x6c>
 34c:	bb 0f       	add	r27, r27
 34e:	11 f4       	brne	.+4      	; 0x354 <__floatsisf+0x36>
 350:	60 ff       	sbrs	r22, 0
 352:	1b c0       	rjmp	.+54     	; 0x38a <__floatsisf+0x6c>
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	16 c0       	rjmp	.+44     	; 0x38a <__floatsisf+0x6c>
 35e:	88 23       	and	r24, r24
 360:	11 f0       	breq	.+4      	; 0x366 <__floatsisf+0x48>
 362:	96 e9       	ldi	r25, 0x96	; 150
 364:	11 c0       	rjmp	.+34     	; 0x388 <__floatsisf+0x6a>
 366:	77 23       	and	r23, r23
 368:	21 f0       	breq	.+8      	; 0x372 <__floatsisf+0x54>
 36a:	9e e8       	ldi	r25, 0x8E	; 142
 36c:	87 2f       	mov	r24, r23
 36e:	76 2f       	mov	r23, r22
 370:	05 c0       	rjmp	.+10     	; 0x37c <__floatsisf+0x5e>
 372:	66 23       	and	r22, r22
 374:	71 f0       	breq	.+28     	; 0x392 <__floatsisf+0x74>
 376:	96 e8       	ldi	r25, 0x86	; 134
 378:	86 2f       	mov	r24, r22
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	2a f0       	brmi	.+10     	; 0x38a <__floatsisf+0x6c>
 380:	9a 95       	dec	r25
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	da f7       	brpl	.-10     	; 0x380 <__floatsisf+0x62>
 38a:	88 0f       	add	r24, r24
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	97 f9       	bld	r25, 7
 392:	08 95       	ret

00000394 <__fp_split3>:
 394:	57 fd       	sbrc	r21, 7
 396:	90 58       	subi	r25, 0x80	; 128
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	59 f0       	breq	.+22     	; 0x3b4 <__fp_splitA+0x10>
 39e:	5f 3f       	cpi	r21, 0xFF	; 255
 3a0:	71 f0       	breq	.+28     	; 0x3be <__fp_splitA+0x1a>
 3a2:	47 95       	ror	r20

000003a4 <__fp_splitA>:
 3a4:	88 0f       	add	r24, r24
 3a6:	97 fb       	bst	r25, 7
 3a8:	99 1f       	adc	r25, r25
 3aa:	61 f0       	breq	.+24     	; 0x3c4 <__fp_splitA+0x20>
 3ac:	9f 3f       	cpi	r25, 0xFF	; 255
 3ae:	79 f0       	breq	.+30     	; 0x3ce <__fp_splitA+0x2a>
 3b0:	87 95       	ror	r24
 3b2:	08 95       	ret
 3b4:	12 16       	cp	r1, r18
 3b6:	13 06       	cpc	r1, r19
 3b8:	14 06       	cpc	r1, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <__fp_split3+0xe>
 3be:	46 95       	lsr	r20
 3c0:	f1 df       	rcall	.-30     	; 0x3a4 <__fp_splitA>
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__fp_splitA+0x30>
 3c4:	16 16       	cp	r1, r22
 3c6:	17 06       	cpc	r1, r23
 3c8:	18 06       	cpc	r1, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	f1 cf       	rjmp	.-30     	; 0x3b0 <__fp_splitA+0xc>
 3ce:	86 95       	lsr	r24
 3d0:	71 05       	cpc	r23, r1
 3d2:	61 05       	cpc	r22, r1
 3d4:	08 94       	sec
 3d6:	08 95       	ret

000003d8 <__fp_zero>:
 3d8:	e8 94       	clt

000003da <__fp_szero>:
 3da:	bb 27       	eor	r27, r27
 3dc:	66 27       	eor	r22, r22
 3de:	77 27       	eor	r23, r23
 3e0:	cb 01       	movw	r24, r22
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__mulsf3>:
 3e6:	0b d0       	rcall	.+22     	; 0x3fe <__mulsf3x>
 3e8:	78 c0       	rjmp	.+240    	; 0x4da <__fp_round>
 3ea:	69 d0       	rcall	.+210    	; 0x4be <__fp_pscA>
 3ec:	28 f0       	brcs	.+10     	; 0x3f8 <__mulsf3+0x12>
 3ee:	6e d0       	rcall	.+220    	; 0x4cc <__fp_pscB>
 3f0:	18 f0       	brcs	.+6      	; 0x3f8 <__mulsf3+0x12>
 3f2:	95 23       	and	r25, r21
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__mulsf3+0x12>
 3f6:	5a c0       	rjmp	.+180    	; 0x4ac <__fp_inf>
 3f8:	5f c0       	rjmp	.+190    	; 0x4b8 <__fp_nan>
 3fa:	11 24       	eor	r1, r1
 3fc:	ee cf       	rjmp	.-36     	; 0x3da <__fp_szero>

000003fe <__mulsf3x>:
 3fe:	ca df       	rcall	.-108    	; 0x394 <__fp_split3>
 400:	a0 f3       	brcs	.-24     	; 0x3ea <__mulsf3+0x4>

00000402 <__mulsf3_pse>:
 402:	95 9f       	mul	r25, r21
 404:	d1 f3       	breq	.-12     	; 0x3fa <__mulsf3+0x14>
 406:	95 0f       	add	r25, r21
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	55 1f       	adc	r21, r21
 40c:	62 9f       	mul	r22, r18
 40e:	f0 01       	movw	r30, r0
 410:	72 9f       	mul	r23, r18
 412:	bb 27       	eor	r27, r27
 414:	f0 0d       	add	r31, r0
 416:	b1 1d       	adc	r27, r1
 418:	63 9f       	mul	r22, r19
 41a:	aa 27       	eor	r26, r26
 41c:	f0 0d       	add	r31, r0
 41e:	b1 1d       	adc	r27, r1
 420:	aa 1f       	adc	r26, r26
 422:	64 9f       	mul	r22, r20
 424:	66 27       	eor	r22, r22
 426:	b0 0d       	add	r27, r0
 428:	a1 1d       	adc	r26, r1
 42a:	66 1f       	adc	r22, r22
 42c:	82 9f       	mul	r24, r18
 42e:	22 27       	eor	r18, r18
 430:	b0 0d       	add	r27, r0
 432:	a1 1d       	adc	r26, r1
 434:	62 1f       	adc	r22, r18
 436:	73 9f       	mul	r23, r19
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	62 1f       	adc	r22, r18
 43e:	83 9f       	mul	r24, r19
 440:	a0 0d       	add	r26, r0
 442:	61 1d       	adc	r22, r1
 444:	22 1f       	adc	r18, r18
 446:	74 9f       	mul	r23, r20
 448:	33 27       	eor	r19, r19
 44a:	a0 0d       	add	r26, r0
 44c:	61 1d       	adc	r22, r1
 44e:	23 1f       	adc	r18, r19
 450:	84 9f       	mul	r24, r20
 452:	60 0d       	add	r22, r0
 454:	21 1d       	adc	r18, r1
 456:	82 2f       	mov	r24, r18
 458:	76 2f       	mov	r23, r22
 45a:	6a 2f       	mov	r22, r26
 45c:	11 24       	eor	r1, r1
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	50 40       	sbci	r21, 0x00	; 0
 462:	8a f0       	brmi	.+34     	; 0x486 <__mulsf3_pse+0x84>
 464:	e1 f0       	breq	.+56     	; 0x49e <__mulsf3_pse+0x9c>
 466:	88 23       	and	r24, r24
 468:	4a f0       	brmi	.+18     	; 0x47c <__mulsf3_pse+0x7a>
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	bb 1f       	adc	r27, r27
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	a9 f7       	brne	.-22     	; 0x466 <__mulsf3_pse+0x64>
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	51 05       	cpc	r21, r1
 480:	70 f0       	brcs	.+28     	; 0x49e <__mulsf3_pse+0x9c>
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__fp_inf>
 484:	aa cf       	rjmp	.-172    	; 0x3da <__fp_szero>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	ec f3       	brlt	.-6      	; 0x484 <__mulsf3_pse+0x82>
 48a:	98 3e       	cpi	r25, 0xE8	; 232
 48c:	dc f3       	brlt	.-10     	; 0x484 <__mulsf3_pse+0x82>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f7 95       	ror	r31
 498:	e7 95       	ror	r30
 49a:	9f 5f       	subi	r25, 0xFF	; 255
 49c:	c1 f7       	brne	.-16     	; 0x48e <__mulsf3_pse+0x8c>
 49e:	fe 2b       	or	r31, r30
 4a0:	88 0f       	add	r24, r24
 4a2:	91 1d       	adc	r25, r1
 4a4:	96 95       	lsr	r25
 4a6:	87 95       	ror	r24
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <__fp_inf>:
 4ac:	97 f9       	bld	r25, 7
 4ae:	9f 67       	ori	r25, 0x7F	; 127
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <__fp_nan>:
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	08 95       	ret

000004be <__fp_pscA>:
 4be:	00 24       	eor	r0, r0
 4c0:	0a 94       	dec	r0
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	09 06       	cpc	r0, r25
 4ca:	08 95       	ret

000004cc <__fp_pscB>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	05 06       	cpc	r0, r21
 4d8:	08 95       	ret

000004da <__fp_round>:
 4da:	09 2e       	mov	r0, r25
 4dc:	03 94       	inc	r0
 4de:	00 0c       	add	r0, r0
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__fp_round+0xc>
 4e2:	88 23       	and	r24, r24
 4e4:	52 f0       	brmi	.+20     	; 0x4fa <__fp_round+0x20>
 4e6:	bb 0f       	add	r27, r27
 4e8:	40 f4       	brcc	.+16     	; 0x4fa <__fp_round+0x20>
 4ea:	bf 2b       	or	r27, r31
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__fp_round+0x18>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <__fp_round+0x20>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
