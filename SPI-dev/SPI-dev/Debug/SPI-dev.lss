
SPI-dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001df  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000423  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c4  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003dd  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	85 d0       	rcall	.+266    	; 0x1ce <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:
	} else if (angle_cm ==  SPI_ANGLE_LEFT) {
		OCR1B = LEFT;
	} else if (angle_cm ==  SPI_ANGLE_RIGHT) {
		OCR1B = RIGHT;
	} else {
		PORTA = 0xEA;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_tranceive>:
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SPI_tranceive+0x2>
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <read_data_send_check>:
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	f8 df       	rcall	.-16     	; 0xd0 <SPI_tranceive>
  e0:	80 93 02 01 	sts	0x0102, r24
  e4:	8e ee       	ldi	r24, 0xEE	; 238
  e6:	82 b9       	out	0x02, r24	; 2
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	f2 df       	rcall	.-28     	; 0xd0 <SPI_tranceive>
  ec:	80 93 01 01 	sts	0x0101, r24
  f0:	90 91 02 01 	lds	r25, 0x0102
  f4:	89 27       	eor	r24, r25
  f6:	80 93 00 01 	sts	0x0100, r24
  fa:	ea cf       	rjmp	.-44     	; 0xd0 <SPI_tranceive>
  fc:	08 95       	ret

000000fe <PWM_init>:
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8a 6f       	ori	r24, 0xFA	; 250
 10c:	80 83       	st	Z, r24
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8a 61       	ori	r24, 0x1A	; 26
 116:	80 83       	st	Z, r24
 118:	e6 e8       	ldi	r30, 0x86	; 134
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	8f e1       	ldi	r24, 0x1F	; 31
 11e:	9e e4       	ldi	r25, 0x4E	; 78
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	88 57       	subi	r24, 0x78	; 120
 12a:	95 40       	sbci	r25, 0x05	; 5
 12c:	90 93 0e 01 	sts	0x010E, r25
 130:	80 93 0d 01 	sts	0x010D, r24
 134:	80 81       	ld	r24, Z
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	8a 5b       	subi	r24, 0xBA	; 186
 13a:	94 40       	sbci	r25, 0x04	; 4
 13c:	90 93 08 01 	sts	0x0108, r25
 140:	80 93 07 01 	sts	0x0107, r24
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	82 57       	subi	r24, 0x72	; 114
 14a:	96 40       	sbci	r25, 0x06	; 6
 14c:	90 93 04 01 	sts	0x0104, r25
 150:	80 93 03 01 	sts	0x0103, r24
 154:	80 81       	ld	r24, Z
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	84 5b       	subi	r24, 0xB4	; 180
 15a:	95 40       	sbci	r25, 0x05	; 5
 15c:	90 93 06 01 	sts	0x0106, r25
 160:	80 93 05 01 	sts	0x0105, r24
 164:	80 81       	ld	r24, Z
 166:	91 81       	ldd	r25, Z+1	; 0x01
 168:	83 5c       	subi	r24, 0xC3	; 195
 16a:	95 40       	sbci	r25, 0x05	; 5
 16c:	90 93 0c 01 	sts	0x010C, r25
 170:	80 93 0b 01 	sts	0x010B, r24
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	86 54       	subi	r24, 0x46	; 70
 17a:	95 40       	sbci	r25, 0x05	; 5
 17c:	90 93 0a 01 	sts	0x010A, r25
 180:	80 93 09 01 	sts	0x0109, r24
 184:	08 95       	ret

00000186 <speed_controller>:
void speed_controller(signed char  speed) {
		// speeds choses between 0-127 or reversed speeds between 0-(-127),
		// OCR1A = 18600(the compare value which is used with the counter ICR1 to create a fast PWM) give neutral speed.
		// The highest speed will be reached when the OCR1A = 18219 (when direction = 127) which gives a PWM signal = (2ms high signal from 20 ms).
		// for example when speed = 0 so OCR1A = 18600 which will give neutral speed.
		OCR1A = 18600 - (speed * 3);
 186:	99 27       	eor	r25, r25
 188:	87 fd       	sbrc	r24, 7
 18a:	90 95       	com	r25
 18c:	9c 01       	movw	r18, r24
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	91 95       	neg	r25
 198:	81 95       	neg	r24
 19a:	91 09       	sbc	r25, r1
 19c:	88 55       	subi	r24, 0x58	; 88
 19e:	97 4b       	sbci	r25, 0xB7	; 183
 1a0:	90 93 89 00 	sts	0x0089, r25
 1a4:	80 93 88 00 	sts	0x0088, r24
 1a8:	08 95       	ret

000001aa <direction_controller>:
	
void direction_controller(signed char direction ) {
		// Right directions between 0-127 and left directions between 0-(-127), OCR1B = 18600(the compare value with the counter ICR1) give neutral direction.
		// The far right direction will be near to OCR1B = 18219 (when direction = 127) which gives a PWM signal  = (2ms high signal from 20ms),
		// while the far left will be near to OCR1B = 18981 (when direction = -127) which gives a PWM signal  = (1ms high signal from 20ms).
		OCR1B = 18600 - (direction * 3);
 1aa:	99 27       	eor	r25, r25
 1ac:	87 fd       	sbrc	r24, 7
 1ae:	90 95       	com	r25
 1b0:	9c 01       	movw	r18, r24
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	91 95       	neg	r25
 1bc:	81 95       	neg	r24
 1be:	91 09       	sbc	r25, r1
 1c0:	88 55       	subi	r24, 0x58	; 88
 1c2:	97 4b       	sbci	r25, 0xB7	; 183
 1c4:	90 93 8b 00 	sts	0x008B, r25
 1c8:	80 93 8a 00 	sts	0x008A, r24
 1cc:	08 95       	ret

000001ce <main>:


int main(void) {


	SPI_SlaveInit();
 1ce:	7c df       	rcall	.-264    	; 0xc8 <SPI_SlaveInit>
	PWM_init();
 1d0:	96 df       	rcall	.-212    	; 0xfe <PWM_init>

	return check;
}

void init(void) {
	DDRA = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	81 b9       	out	0x01, r24	; 1

	SPI_SlaveInit();
	PWM_init();
	init();

	PORTA = 0xBB; 	
 1d6:	8b eb       	ldi	r24, 0xBB	; 187
 1d8:	82 b9       	out	0x02, r24	; 2
	uint8_t spi_read = 0;
	uint8_t cntr = 0;
	

	
	OCR1A = SPEED_BACK;
 1da:	80 91 09 01 	lds	r24, 0x0109
 1de:	90 91 0a 01 	lds	r25, 0x010A
 1e2:	90 93 89 00 	sts	0x0089, r25
 1e6:	80 93 88 00 	sts	0x0088, r24
	OCR1B = NEUTRAL;
 1ea:	80 91 0d 01 	lds	r24, 0x010D
 1ee:	90 91 0e 01 	lds	r25, 0x010E
 1f2:	90 93 8b 00 	sts	0x008B, r25
 1f6:	80 93 8a 00 	sts	0x008A, r24
	
	while(1) {
		
		spi_rdy = 0;
 1fa:	90 e0       	ldi	r25, 0x00	; 0
		
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
 1fc:	c1 e0       	ldi	r28, 0x01	; 1
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <main+0x42>
		
		spi_rdy = 0;
		
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
 200:	8e ee       	ldi	r24, 0xEE	; 238
 202:	66 df       	rcall	.-308    	; 0xd0 <SPI_tranceive>
			spi_rdy = (spi_read == SPI_START);
 204:	9c 2f       	mov	r25, r28
 206:	8a 3a       	cpi	r24, 0xAA	; 170
 208:	19 f0       	breq	.+6      	; 0x210 <main+0x42>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <main+0x42>
	OCR1A = SPEED_BACK;
	OCR1B = NEUTRAL;
	
	while(1) {
		
		spi_rdy = 0;
 20e:	90 e0       	ldi	r25, 0x00	; 0
		
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
 210:	99 23       	and	r25, r25
 212:	b1 f3       	breq	.-20     	; 0x200 <main+0x32>
			
			cntr++;
		}
		cntr = 0;
		
		read_data_send_check();
 214:	63 df       	rcall	.-314    	; 0xdc <read_data_send_check>
		
		/* Check if communication was a success */
		spi_success = SPI_tranceive(SPI_NAN) == SPI_FINISHED;
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	5b df       	rcall	.-330    	; 0xd0 <SPI_tranceive>
		
		if (spi_success) {
 21a:	86 36       	cpi	r24, 0x66	; 102
 21c:	c1 f7       	brne	.-16     	; 0x20e <main+0x40>
			//impl_speed_direction();
			speed_controller(speed_cm);
 21e:	80 91 02 01 	lds	r24, 0x0102
 222:	b1 df       	rcall	.-158    	; 0x186 <speed_controller>
			direction_controller(angle_cm);
 224:	80 91 01 01 	lds	r24, 0x0101
 228:	c0 df       	rcall	.-128    	; 0x1aa <direction_controller>
	OCR1A = SPEED_BACK;
	OCR1B = NEUTRAL;
	
	while(1) {
		
		spi_rdy = 0;
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	f1 cf       	rjmp	.-30     	; 0x210 <main+0x42>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
