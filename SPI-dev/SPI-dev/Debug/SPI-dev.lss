
SPI-dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000474  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ea  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cc  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038b  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ef       	ldi	r30, 0xF8	; 248
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	31 d0       	rcall	.+98     	; 0x126 <main>
  c4:	97 c0       	rjmp	.+302    	; 0x1f4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:

	}
}

void print_buffer_port_a(uint8_t *buffer, uint8_t size) {
	for (uint8_t i = 0; i < size; i++) {
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_tranceive>:
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SPI_tranceive+0x2>
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <read_data_send_check>:
 * Returns 1 if the communication was successful or 0 if it failed.
 * Ideally we want as few function calls as possible in this method.
 */
void read_data_send_check(void) {
	/* Read Speed byte */
	speed_cm = SPI_tranceive(SPI_NAN);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	f8 df       	rcall	.-16     	; 0xd0 <SPI_tranceive>
  e0:	80 93 02 01 	sts	0x0102, r24
	
	PORTA = 0xEE;
  e4:	8e ee       	ldi	r24, 0xEE	; 238
  e6:	82 b9       	out	0x02, r24	; 2
	
	/* Read Angle byte */
	angle_cm = SPI_tranceive(SPI_NAN);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	f2 df       	rcall	.-28     	; 0xd0 <SPI_tranceive>
  ec:	80 93 01 01 	sts	0x0101, r24

	/* Send CHECK byte */
	check_byte = speed_cm ^ angle_cm;
  f0:	90 91 02 01 	lds	r25, 0x0102
  f4:	89 27       	eor	r24, r25
  f6:	80 93 00 01 	sts	0x0100, r24
	SPI_tranceive(check_byte);	
  fa:	ea cf       	rjmp	.-44     	; 0xd0 <SPI_tranceive>
  fc:	08 95       	ret

000000fe <PWM_init>:
}

void PWM_init() {
	DDRD |= 0xFF;
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A |=  (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8a 6f       	ori	r24, 0xFA	; 250
 10c:	80 83       	st	Z, r24
	TCCR1B |=  (0<<WGM10) | (1<<WGM11) | (1<<WGM12) | (1<<WGM13);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8a 61       	ori	r24, 0x1A	; 26
 116:	80 83       	st	Z, r24
	ICR1 = 19999 ;
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	90 93 87 00 	sts	0x0087, r25
 120:	80 93 86 00 	sts	0x0086, r24
 124:	08 95       	ret

00000126 <main>:
}

int main(void) {


	SPI_SlaveInit();
 126:	d0 df       	rcall	.-96     	; 0xc8 <SPI_SlaveInit>
	PWM_init();
 128:	ea df       	rcall	.-44     	; 0xfe <PWM_init>

	return check;
}

void init(void) {
	DDRA = 0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	81 b9       	out	0x01, r24	; 1

	SPI_SlaveInit();
	PWM_init();
	init();

	PORTA = 0xBB; 	
 12e:	8b eb       	ldi	r24, 0xBB	; 187
 130:	82 b9       	out	0x02, r24	; 2
	
	uint8_t spi_read = 0;
	uint8_t cntr = 0;
	

	unsigned int NEUTRAL = ICR1 -1400; // 1.43ms
 132:	e6 e8       	ldi	r30, 0x86	; 134
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	c0 81       	ld	r28, Z
 138:	d1 81       	ldd	r29, Z+1	; 0x01
 13a:	c8 57       	subi	r28, 0x78	; 120
 13c:	d5 40       	sbci	r29, 0x05	; 5
	unsigned int LEFT = ICR1 - 1210;
 13e:	80 81       	ld	r24, Z
 140:	91 81       	ldd	r25, Z+1	; 0x01
	unsigned int RIGHT= ICR1 -1650;
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
	
	unsigned int SPEED_LOW = ICR1 - 1460;
 146:	c0 80       	ld	r12, Z
 148:	d1 80       	ldd	r13, Z+1	; 0x01
 14a:	84 eb       	ldi	r24, 0xB4	; 180
 14c:	c8 1a       	sub	r12, r24
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	d8 0a       	sbc	r13, r24
	unsigned int SPEED_MIDDLE = ICR1 - 1475;
 152:	a0 80       	ld	r10, Z
 154:	b1 80       	ldd	r11, Z+1	; 0x01
 156:	e3 ec       	ldi	r30, 0xC3	; 195
 158:	ae 1a       	sub	r10, r30
 15a:	e5 e0       	ldi	r30, 0x05	; 5
 15c:	be 0a       	sbc	r11, r30

	
	OCR1A = NEUTRAL;
 15e:	d0 93 89 00 	sts	0x0089, r29
 162:	c0 93 88 00 	sts	0x0088, r28
	OCR1B = NEUTRAL;
 166:	d0 93 8b 00 	sts	0x008B, r29
 16a:	c0 93 8a 00 	sts	0x008A, r28
	
	while(1) {
		
		spi_rdy = 0;
 16e:	90 e0       	ldi	r25, 0x00	; 0
			} else if (angle_cm == SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm == SPI_ANGLE_RIGHT) {
				OCR1B = RIGHT;
			} else {
				PORTA = 0xEA;
 170:	0f 2e       	mov	r0, r31
 172:	fa ee       	ldi	r31, 0xEA	; 234
 174:	8f 2e       	mov	r8, r31
 176:	f0 2d       	mov	r31, r0
			} else {
				PORTA = 0xAE;
			}
			
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
				OCR1B = NEUTRAL;
 178:	0f 2e       	mov	r0, r31
 17a:	fa e8       	ldi	r31, 0x8A	; 138
 17c:	ef 2e       	mov	r14, r31
 17e:	f1 2c       	mov	r15, r1
 180:	f0 2d       	mov	r31, r0
			} else if (speed_cm == SPI_SPEED_LOW) {
				OCR1A = SPEED_LOW;
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
				OCR1A = SPEED_MIDDLE;
			} else {
				PORTA = 0xAE;
 182:	0f 2e       	mov	r0, r31
 184:	fe ea       	ldi	r31, 0xAE	; 174
 186:	7f 2e       	mov	r7, r31
 188:	f0 2d       	mov	r31, r0
			if (speed_cm == SPI_SPEED_NEUTRAL) {
				OCR1A = NEUTRAL;
			} else if (speed_cm == SPI_SPEED_LOW) {
				OCR1A = SPEED_LOW;
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
				OCR1A = SPEED_MIDDLE;
 18a:	08 e8       	ldi	r16, 0x88	; 136
 18c:	10 e0       	ldi	r17, 0x00	; 0
		
		spi_rdy = 0;
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
 18e:	99 24       	eor	r9, r9
 190:	93 94       	inc	r9
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <main+0x7e>
	while(1) {
		
		spi_rdy = 0;
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
 194:	8e ee       	ldi	r24, 0xEE	; 238
 196:	9c df       	rcall	.-200    	; 0xd0 <SPI_tranceive>
			spi_rdy = (spi_read == SPI_START);
 198:	99 2d       	mov	r25, r9
 19a:	8a 3a       	cpi	r24, 0xAA	; 170
 19c:	19 f0       	breq	.+6      	; 0x1a4 <main+0x7e>
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <main+0x7e>
	OCR1A = NEUTRAL;
	OCR1B = NEUTRAL;
	
	while(1) {
		
		spi_rdy = 0;
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
 1a4:	99 23       	and	r25, r25
 1a6:	b1 f3       	breq	.-20     	; 0x194 <main+0x6e>
			
			cntr++;
		}
		cntr = 0;
		
		read_data_send_check();
 1a8:	99 df       	rcall	.-206    	; 0xdc <read_data_send_check>
		
		/* Check if communication was a success */
		spi_success = SPI_tranceive(SPI_NAN);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 df       	rcall	.-222    	; 0xd0 <SPI_tranceive>
		
		if (spi_success) {
 1ae:	88 23       	and	r24, r24
 1b0:	c1 f3       	breq	.-16     	; 0x1a2 <main+0x7c>
			if (speed_cm == SPI_SPEED_NEUTRAL) {
 1b2:	80 91 02 01 	lds	r24, 0x0102
 1b6:	81 11       	cpse	r24, r1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0x9c>
				OCR1A = NEUTRAL;
 1ba:	f8 01       	movw	r30, r16
 1bc:	d1 83       	std	Z+1, r29	; 0x01
 1be:	c0 83       	st	Z, r28
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <main+0xb6>
			} else if (speed_cm == SPI_SPEED_LOW) {
 1c2:	80 31       	cpi	r24, 0x10	; 16
 1c4:	21 f4       	brne	.+8      	; 0x1ce <main+0xa8>
				OCR1A = SPEED_LOW;
 1c6:	f8 01       	movw	r30, r16
 1c8:	d1 82       	std	Z+1, r13	; 0x01
 1ca:	c0 82       	st	Z, r12
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <main+0xb6>
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	21 f4       	brne	.+8      	; 0x1da <main+0xb4>
				OCR1A = SPEED_MIDDLE;
 1d2:	f8 01       	movw	r30, r16
 1d4:	b1 82       	std	Z+1, r11	; 0x01
 1d6:	a0 82       	st	Z, r10
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <main+0xb6>
			} else {
				PORTA = 0xAE;
 1da:	72 b8       	out	0x02, r7	; 2
			}
			
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
 1dc:	80 91 01 01 	lds	r24, 0x0101
 1e0:	81 11       	cpse	r24, r1
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <main+0xc8>
				OCR1B = NEUTRAL;
 1e4:	f7 01       	movw	r30, r14
 1e6:	d1 83       	std	Z+1, r29	; 0x01
 1e8:	c0 83       	st	Z, r28
	OCR1A = NEUTRAL;
	OCR1B = NEUTRAL;
	
	while(1) {
		
		spi_rdy = 0;
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	db cf       	rjmp	.-74     	; 0x1a4 <main+0x7e>
			} else if (angle_cm == SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm == SPI_ANGLE_RIGHT) {
				OCR1B = RIGHT;
			} else {
				PORTA = 0xEA;
 1ee:	82 b8       	out	0x02, r8	; 2
	OCR1A = NEUTRAL;
	OCR1B = NEUTRAL;
	
	while(1) {
		
		spi_rdy = 0;
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	d8 cf       	rjmp	.-80     	; 0x1a4 <main+0x7e>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
