
SPI-dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000048e  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000206  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000408  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000283  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041d  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	31 d0       	rcall	.+98     	; 0x126 <main>
  c4:	d4 c0       	rjmp	.+424    	; 0x26e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:

	}
}

void print_buffer_port_a(uint8_t *buffer, uint8_t size) {
	for (uint8_t i = 0; i < size; i++) {
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_tranceive>:
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SPI_tranceive+0x2>
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <read_data_send_check>:
 * Returns 1 if the communication was successful or 0 if it failed.
 * Ideally we want as few function calls as possible in this method.
 */
void read_data_send_check(void) {
	/* Read Speed byte */
	speed_cm = SPI_tranceive(SPI_NAN);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	f8 df       	rcall	.-16     	; 0xd0 <SPI_tranceive>
  e0:	80 93 02 01 	sts	0x0102, r24
	
	PORTA = 0xEE;
  e4:	8e ee       	ldi	r24, 0xEE	; 238
  e6:	82 b9       	out	0x02, r24	; 2
	
	/* Read Angle byte */
	angle_cm = SPI_tranceive(SPI_NAN);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	f2 df       	rcall	.-28     	; 0xd0 <SPI_tranceive>
  ec:	80 93 01 01 	sts	0x0101, r24

	/* Send CHECK byte */
	check_byte = speed_cm ^ angle_cm;
  f0:	90 91 02 01 	lds	r25, 0x0102
  f4:	89 27       	eor	r24, r25
  f6:	80 93 00 01 	sts	0x0100, r24
	SPI_tranceive(check_byte);	
  fa:	ea cf       	rjmp	.-44     	; 0xd0 <SPI_tranceive>
  fc:	08 95       	ret

000000fe <PWM_init>:
}

void PWM_init() {
	DDRD |= 0xFF;
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A |=  (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8a 6f       	ori	r24, 0xFA	; 250
 10c:	80 83       	st	Z, r24
	TCCR1B |=  (0<<WGM10) | (1<<WGM11) | (1<<WGM12) | (1<<WGM13);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8a 61       	ori	r24, 0x1A	; 26
 116:	80 83       	st	Z, r24
	ICR1 = 19999 ;
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	90 93 87 00 	sts	0x0087, r25
 120:	80 93 86 00 	sts	0x0086, r24
 124:	08 95       	ret

00000126 <main>:
	
}

int main(void) {
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	00 d0       	rcall	.+0      	; 0x12c <main+0x6>
 12c:	00 d0       	rcall	.+0      	; 0x12e <main+0x8>
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62


	SPI_SlaveInit();
 132:	ca df       	rcall	.-108    	; 0xc8 <SPI_SlaveInit>
	PWM_init();
 134:	e4 df       	rcall	.-56     	; 0xfe <PWM_init>

	return check;
}

void init(void) {
	DDRA = 0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	81 b9       	out	0x01, r24	; 1

	SPI_SlaveInit();
	PWM_init();
	init();

	PORTA = 0xBB; 	
 13a:	8b eb       	ldi	r24, 0xBB	; 187
 13c:	82 b9       	out	0x02, r24	; 2
	
	uint8_t spi_read = 0;
	uint8_t cntr = 0;
	

	unsigned int NEUTRAL = ICR1 -1400; // 1.43ms
 13e:	e6 e8       	ldi	r30, 0x86	; 134
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	91 81       	ldd	r25, Z+1	; 0x01
 146:	9c 01       	movw	r18, r24
 148:	28 57       	subi	r18, 0x78	; 120
 14a:	35 40       	sbci	r19, 0x05	; 5
 14c:	3c 83       	std	Y+4, r19	; 0x04
 14e:	2b 83       	std	Y+3, r18	; 0x03
	unsigned int LEFT = ICR1 - 1210;
 150:	a0 80       	ld	r10, Z
 152:	b1 80       	ldd	r11, Z+1	; 0x01
 154:	3a eb       	ldi	r19, 0xBA	; 186
 156:	a3 1a       	sub	r10, r19
 158:	34 e0       	ldi	r19, 0x04	; 4
 15a:	b3 0a       	sbc	r11, r19
	unsigned int RIGHT= ICR1 -1650;
 15c:	80 80       	ld	r8, Z
 15e:	91 80       	ldd	r9, Z+1	; 0x01
 160:	82 e7       	ldi	r24, 0x72	; 114
 162:	88 1a       	sub	r8, r24
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	98 0a       	sbc	r9, r24
	
	unsigned int SPEED_LOW = ICR1 - 1460;
 168:	c0 80       	ld	r12, Z
 16a:	d1 80       	ldd	r13, Z+1	; 0x01
 16c:	94 eb       	ldi	r25, 0xB4	; 180
 16e:	c9 1a       	sub	r12, r25
 170:	95 e0       	ldi	r25, 0x05	; 5
 172:	d9 0a       	sbc	r13, r25
	unsigned int SPEED_MIDDLE = ICR1 - 1475;
 174:	60 80       	ld	r6, Z
 176:	71 80       	ldd	r7, Z+1	; 0x01
 178:	a3 ec       	ldi	r26, 0xC3	; 195
 17a:	6a 1a       	sub	r6, r26
 17c:	a5 e0       	ldi	r26, 0x05	; 5
 17e:	7a 0a       	sbc	r7, r26
	unsigned int SPEED_BACK = ICR1 - 1200; //1.03 ms
 180:	80 81       	ld	r24, Z
 182:	91 81       	ldd	r25, Z+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	e0 5b       	subi	r30, 0xB0	; 176
 188:	f4 40       	sbci	r31, 0x04	; 4
 18a:	fa 83       	std	Y+2, r31	; 0x02
 18c:	e9 83       	std	Y+1, r30	; 0x01

	
	OCR1A = NEUTRAL;
 18e:	e8 e8       	ldi	r30, 0x88	; 136
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	3c 81       	ldd	r19, Y+4	; 0x04
 196:	31 83       	std	Z+1, r19	; 0x01
 198:	20 83       	st	Z, r18
	OCR1B = NEUTRAL;
 19a:	30 93 8b 00 	sts	0x008B, r19
 19e:	20 93 8a 00 	sts	0x008A, r18
	OCR1A = SPEED_BACK;
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
	
	while(1) {
		
		spi_rdy = 0;
 1aa:	90 e0       	ldi	r25, 0x00	; 0
			} else if (angle_cm ==  SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm ==  SPI_ANGLE_RIGHT) {
				OCR1B = RIGHT;
			} else {
				PORTA = 0xEA;
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fa ee       	ldi	r31, 0xEA	; 234
 1b0:	4f 2e       	mov	r4, r31
 1b2:	f0 2d       	mov	r31, r0
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
				OCR1B = NEUTRAL;
			} else if (angle_cm ==  SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm ==  SPI_ANGLE_RIGHT) {
				OCR1B = RIGHT;
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fa e8       	ldi	r31, 0x8A	; 138
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f1 2c       	mov	r15, r1
 1bc:	f0 2d       	mov	r31, r0
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
				OCR1A = SPEED_MIDDLE;
			}else if (speed_cm == SPI_BACK) {
				OCR1A = SPEED_BACK;
			}else {
				PORTA = 0xAE;
 1be:	0f 2e       	mov	r0, r31
 1c0:	fe ea       	ldi	r31, 0xAE	; 174
 1c2:	3f 2e       	mov	r3, r31
 1c4:	f0 2d       	mov	r31, r0
			} else if (speed_cm == SPI_SPEED_LOW) {
				OCR1A = SPEED_LOW;
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
				OCR1A = SPEED_MIDDLE;
			}else if (speed_cm == SPI_BACK) {
				OCR1A = SPEED_BACK;
 1c6:	08 e8       	ldi	r16, 0x88	; 136
 1c8:	10 e0       	ldi	r17, 0x00	; 0
		
		spi_rdy = 0;
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
 1ca:	55 24       	eor	r5, r5
 1cc:	53 94       	inc	r5
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <main+0xba>
	while(1) {
		
		spi_rdy = 0;
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
 1d0:	8e ee       	ldi	r24, 0xEE	; 238
 1d2:	7e df       	rcall	.-260    	; 0xd0 <SPI_tranceive>
			spi_rdy = (spi_read == SPI_START);
 1d4:	95 2d       	mov	r25, r5
 1d6:	8a 3a       	cpi	r24, 0xAA	; 170
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <main+0xba>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <main+0xba>
	OCR1B = NEUTRAL;
	OCR1A = SPEED_BACK;
	
	while(1) {
		
		spi_rdy = 0;
 1de:	90 e0       	ldi	r25, 0x00	; 0
		/* SPI wait for start byte from central module */
		while (spi_rdy == 0) {
 1e0:	99 23       	and	r25, r25
 1e2:	b1 f3       	breq	.-20     	; 0x1d0 <main+0xaa>
			
			cntr++;
		}
		cntr = 0;
		
		read_data_send_check();
 1e4:	7b df       	rcall	.-266    	; 0xdc <read_data_send_check>
		
		/* Check if communication was a success */
		spi_success = SPI_tranceive(SPI_NAN);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	73 df       	rcall	.-282    	; 0xd0 <SPI_tranceive>
		
		if (spi_success) {
 1ea:	88 23       	and	r24, r24
 1ec:	c1 f3       	breq	.-16     	; 0x1de <main+0xb8>
			if (speed_cm == SPI_SPEED_NEUTRAL) {
 1ee:	80 91 02 01 	lds	r24, 0x0102
 1f2:	81 11       	cpse	r24, r1
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <main+0xde>
				OCR1A = NEUTRAL;
 1f6:	eb 81       	ldd	r30, Y+3	; 0x03
 1f8:	fc 81       	ldd	r31, Y+4	; 0x04
 1fa:	d8 01       	movw	r26, r16
 1fc:	11 96       	adiw	r26, 0x01	; 1
 1fe:	fc 93       	st	X, r31
 200:	ee 93       	st	-X, r30
 202:	17 c0       	rjmp	.+46     	; 0x232 <main+0x10c>
			} else if (speed_cm == SPI_SPEED_LOW) {
 204:	80 31       	cpi	r24, 0x10	; 16
 206:	29 f4       	brne	.+10     	; 0x212 <main+0xec>
				OCR1A = SPEED_LOW;
 208:	d8 01       	movw	r26, r16
 20a:	11 96       	adiw	r26, 0x01	; 1
 20c:	dc 92       	st	X, r13
 20e:	ce 92       	st	-X, r12
 210:	10 c0       	rjmp	.+32     	; 0x232 <main+0x10c>
			} else if (speed_cm == SPI_SPEED_MIDDLE) {
 212:	80 32       	cpi	r24, 0x20	; 32
 214:	21 f4       	brne	.+8      	; 0x21e <main+0xf8>
				OCR1A = SPEED_MIDDLE;
 216:	f8 01       	movw	r30, r16
 218:	71 82       	std	Z+1, r7	; 0x01
 21a:	60 82       	st	Z, r6
 21c:	0a c0       	rjmp	.+20     	; 0x232 <main+0x10c>
			}else if (speed_cm == SPI_BACK) {
 21e:	80 33       	cpi	r24, 0x30	; 48
 220:	39 f4       	brne	.+14     	; 0x230 <main+0x10a>
				OCR1A = SPEED_BACK;
 222:	e9 81       	ldd	r30, Y+1	; 0x01
 224:	fa 81       	ldd	r31, Y+2	; 0x02
 226:	d8 01       	movw	r26, r16
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	fc 93       	st	X, r31
 22c:	ee 93       	st	-X, r30
 22e:	01 c0       	rjmp	.+2      	; 0x232 <main+0x10c>
			}else {
				PORTA = 0xAE;
 230:	32 b8       	out	0x02, r3	; 2
			}
			
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
 232:	80 91 01 01 	lds	r24, 0x0101
 236:	81 11       	cpse	r24, r1
 238:	08 c0       	rjmp	.+16     	; 0x24a <main+0x124>
				OCR1B = NEUTRAL;
 23a:	eb 81       	ldd	r30, Y+3	; 0x03
 23c:	fc 81       	ldd	r31, Y+4	; 0x04
 23e:	d7 01       	movw	r26, r14
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	fc 93       	st	X, r31
 244:	ee 93       	st	-X, r30
	OCR1B = NEUTRAL;
	OCR1A = SPEED_BACK;
	
	while(1) {
		
		spi_rdy = 0;
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	cb cf       	rjmp	.-106    	; 0x1e0 <main+0xba>
				PORTA = 0xAE;
			}
			
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
				OCR1B = NEUTRAL;
			} else if (angle_cm ==  SPI_ANGLE_LEFT) {
 24a:	80 31       	cpi	r24, 0x10	; 16
 24c:	31 f4       	brne	.+12     	; 0x25a <main+0x134>
				OCR1B = LEFT;
 24e:	d7 01       	movw	r26, r14
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	bc 92       	st	X, r11
 254:	ae 92       	st	-X, r10
	OCR1B = NEUTRAL;
	OCR1A = SPEED_BACK;
	
	while(1) {
		
		spi_rdy = 0;
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	c3 cf       	rjmp	.-122    	; 0x1e0 <main+0xba>
			
			if (angle_cm == SPI_ANGLE_NEUTRAL) {
				OCR1B = NEUTRAL;
			} else if (angle_cm ==  SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm ==  SPI_ANGLE_RIGHT) {
 25a:	80 32       	cpi	r24, 0x20	; 32
 25c:	29 f4       	brne	.+10     	; 0x268 <main+0x142>
				OCR1B = RIGHT;
 25e:	f7 01       	movw	r30, r14
 260:	91 82       	std	Z+1, r9	; 0x01
 262:	80 82       	st	Z, r8
	OCR1B = NEUTRAL;
	OCR1A = SPEED_BACK;
	
	while(1) {
		
		spi_rdy = 0;
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	bc cf       	rjmp	.-136    	; 0x1e0 <main+0xba>
			} else if (angle_cm ==  SPI_ANGLE_LEFT) {
				OCR1B = LEFT;
			} else if (angle_cm ==  SPI_ANGLE_RIGHT) {
				OCR1B = RIGHT;
			} else {
				PORTA = 0xEA;
 268:	42 b8       	out	0x02, r4	; 2
	OCR1B = NEUTRAL;
	OCR1A = SPEED_BACK;
	
	while(1) {
		
		spi_rdy = 0;
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	b9 cf       	rjmp	.-142    	; 0x1e0 <main+0xba>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
