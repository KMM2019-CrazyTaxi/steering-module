
SPI-dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000484  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003b8  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019a  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027b  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ec  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	e6 c0       	rjmp	.+460    	; 0x1da <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	95 d0       	rcall	.+298    	; 0x1ee <main>
  c4:	dd c1       	rjmp	.+954    	; 0x480 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:

void SPI_SlaveReceiveBytes(uint8_t *buffer, uint8_t size) {
	for (int i = 0; i < size; i++) {
		buffer[i] = SPI_SlaveReceive();
	}
}
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <SPI_tranceive>:
  d0:	8e bd       	out	0x2e, r24	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <SPI_tranceive+0x2>
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <read_data_send_check>:
 * Returns 1 if the communication was successful or 0 if it failed.
 * Ideally we want as few function calls as possible in this method.
 */
void read_data_send_check(void) {
	/* Read Speed byte */
	speed_cm = SPI_tranceive(SPI_NAN);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	f8 df       	rcall	.-16     	; 0xd0 <SPI_tranceive>
  e0:	80 93 02 01 	sts	0x0102, r24
	
	PORTA = 0xEE;
  e4:	8e ee       	ldi	r24, 0xEE	; 238
  e6:	82 b9       	out	0x02, r24	; 2
	
	/* Read Angle byte */
	angle_cm = SPI_tranceive(SPI_NAN);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	f2 df       	rcall	.-28     	; 0xd0 <SPI_tranceive>
  ec:	80 93 01 01 	sts	0x0101, r24

	/* Send CHECK byte */
	check_byte = speed_cm ^ angle_cm;
  f0:	90 91 02 01 	lds	r25, 0x0102
  f4:	89 27       	eor	r24, r25
  f6:	80 93 00 01 	sts	0x0100, r24
	SPI_tranceive(check_byte);	
  fa:	ea cf       	rjmp	.-44     	; 0xd0 <SPI_tranceive>
  fc:	08 95       	ret

000000fe <PWM_init>:
}


void PWM_init() {
	DDRD |= 0xFF;
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
	TCCR1A |=   (1<<WGM11) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
 104:	e0 e8       	ldi	r30, 0x80	; 128
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 6f       	ori	r24, 0xF2	; 242
 10c:	80 83       	st	Z, r24
	TCCR1B |=   (1<<WGM12) | (1<<WGM13) | (1<<CS10);
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	89 61       	ori	r24, 0x19	; 25
 116:	80 83       	st	Z, r24
	ICR1 = F_CPU/50; //19999 ; // 50 hz needed for the motor and controlling servo.
 118:	e6 e8       	ldi	r30, 0x86	; 134
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	9e e4       	ldi	r25, 0x4E	; 78
 120:	91 83       	std	Z+1, r25	; 0x01
 122:	80 83       	st	Z, r24

	
	NEUTRAL_SPEED = ICR1-1490 ; // pulse width 1.5ms
 124:	80 81       	ld	r24, Z
 126:	91 81       	ldd	r25, Z+1	; 0x01
 128:	82 5d       	subi	r24, 0xD2	; 210
 12a:	95 40       	sbci	r25, 0x05	; 5
 12c:	90 93 06 01 	sts	0x0106, r25
 130:	80 93 05 01 	sts	0x0105, r24
	acceleration_rate_speed = 1;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	a0 e8       	ldi	r26, 0x80	; 128
 13a:	bf e3       	ldi	r27, 0x3F	; 63
 13c:	80 93 09 01 	sts	0x0109, r24
 140:	90 93 0a 01 	sts	0x010A, r25
 144:	a0 93 0b 01 	sts	0x010B, r26
 148:	b0 93 0c 01 	sts	0x010C, r27
	acceleration_rate_direction = 4;
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 08 01 	sts	0x0108, r25
 154:	80 93 07 01 	sts	0x0107, r24
	NEUTRAL_DIRECTION = ICR1-1430; // pulse width 1,43 
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	86 59       	subi	r24, 0x96	; 150
 15e:	95 40       	sbci	r25, 0x05	; 5
 160:	90 93 04 01 	sts	0x0104, r25
 164:	80 93 03 01 	sts	0x0103, r24
 168:	08 95       	ret

0000016a <speed_controller>:

}


void speed_controller(signed char  speed) {
 16a:	84 3c       	cpi	r24, 0xC4	; 196
 16c:	0c f4       	brge	.+2      	; 0x170 <speed_controller+0x6>
 16e:	84 ec       	ldi	r24, 0xC4	; 196
 170:	68 2f       	mov	r22, r24
 172:	8d 33       	cpi	r24, 0x3D	; 61
 174:	0c f0       	brlt	.+2      	; 0x178 <speed_controller+0xe>
 176:	6c e3       	ldi	r22, 0x3C	; 60
			speed = 60;
		} else if (speed < -60) {
			speed = -60;
		}
		
		OCR1A = NEUTRAL_SPEED - (unsigned int)(speed * acceleration_rate_speed);
 178:	77 27       	eor	r23, r23
 17a:	67 fd       	sbrc	r22, 7
 17c:	70 95       	com	r23
 17e:	87 2f       	mov	r24, r23
 180:	97 2f       	mov	r25, r23
 182:	8f d0       	rcall	.+286    	; 0x2a2 <__floatsisf>
 184:	20 91 09 01 	lds	r18, 0x0109
 188:	30 91 0a 01 	lds	r19, 0x010A
 18c:	40 91 0b 01 	lds	r20, 0x010B
 190:	50 91 0c 01 	lds	r21, 0x010C
 194:	ea d0       	rcall	.+468    	; 0x36a <__mulsf3>
 196:	57 d0       	rcall	.+174    	; 0x246 <__fixunssfsi>
 198:	20 91 05 01 	lds	r18, 0x0105
 19c:	30 91 06 01 	lds	r19, 0x0106
 1a0:	c9 01       	movw	r24, r18
 1a2:	86 1b       	sub	r24, r22
 1a4:	97 0b       	sbc	r25, r23
 1a6:	90 93 89 00 	sts	0x0089, r25
 1aa:	80 93 88 00 	sts	0x0088, r24
 1ae:	08 95       	ret

000001b0 <direction_controller>:
		// Right directions between 0-127 and left directions between 0-(-127),
		// OCR1B = 18509(the compare value with the counter ICR1 : counter_limit_const counter_limit_const) give neutral direction.
		// The far right direction will be near to OCR1B = 18219 (when direction = 127) which gives a PWM signal  = (2ms high signal from 20ms),
		// while the far left will be near to OCR1B = 18981 (when direction = -127) which gives a PWM signal  = (1ms high signal from 20ms).

		OCR1B = NEUTRAL_DIRECTION - (direction * acceleration_rate_direction);
 1b0:	20 91 07 01 	lds	r18, 0x0107
 1b4:	30 91 08 01 	lds	r19, 0x0108
 1b8:	68 2f       	mov	r22, r24
 1ba:	62 03       	mulsu	r22, r18
 1bc:	a0 01       	movw	r20, r0
 1be:	63 9f       	mul	r22, r19
 1c0:	50 0d       	add	r21, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	80 91 03 01 	lds	r24, 0x0103
 1c8:	90 91 04 01 	lds	r25, 0x0104
 1cc:	84 1b       	sub	r24, r20
 1ce:	95 0b       	sbc	r25, r21
 1d0:	90 93 8b 00 	sts	0x008B, r25
 1d4:	80 93 8a 00 	sts	0x008A, r24
 1d8:	08 95       	ret

000001da <__vector_3>:
	}



ISR(INT2_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
	
	//Stop button.
	speed_controller(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	c1 df       	rcall	.-126    	; 0x16a <speed_controller>
	direction_controller(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	e2 df       	rcall	.-60     	; 0x1b0 <direction_controller>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__vector_3+0x12>

000001ee <main>:
}

int main(void) {

	// Stop button configurations.
	EICRA |= 1<<ISC20 | 1<<ISC21;
 1ee:	e9 e6       	ldi	r30, 0x69	; 105
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 63       	ori	r24, 0x30	; 48
 1f6:	80 83       	st	Z, r24
	EIMSK |= 1<<INT2;
 1f8:	ea 9a       	sbi	0x1d, 2	; 29
	EIFR |= 1<<INTF2;
 1fa:	e2 9a       	sbi	0x1c, 2	; 28
	sei();               // Enable global interrupts.
 1fc:	78 94       	sei
	SPI_SlaveInit();
 1fe:	64 df       	rcall	.-312    	; 0xc8 <SPI_SlaveInit>
	PWM_init();
 200:	7e df       	rcall	.-260    	; 0xfe <PWM_init>
float acceleration_rate_speed ;
unsigned int acceleration_rate_direction;


void init(void) {
	DDRA = 0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	81 b9       	out	0x01, r24	; 1
	sei();               // Enable global interrupts.
	SPI_SlaveInit();
	PWM_init();
	init();

	PORTA = 0xBB; 	
 206:	8b eb       	ldi	r24, 0xBB	; 187
 208:	82 b9       	out	0x02, r24	; 2
	uint8_t spi_rdy = 0;
	uint8_t spi_success = 0;
	
	uint8_t spi_read = 0;
	
	speed_controller(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	ae df       	rcall	.-164    	; 0x16a <speed_controller>
	direction_controller(0);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	cf df       	rcall	.-98     	; 0x1b0 <direction_controller>
	
	while(1) {
		
		
		spi_rdy = 0;
 212:	90 e0       	ldi	r25, 0x00	; 0
		
		// SPI wait for start byte from central module
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
 214:	c1 e0       	ldi	r28, 0x01	; 1
 216:	08 c0       	rjmp	.+16     	; 0x228 <main+0x3a>
		
		spi_rdy = 0;
		
		// SPI wait for start byte from central module
		while (spi_rdy == 0) {
			spi_read = SPI_tranceive(SPI_ACK);
 218:	8e ee       	ldi	r24, 0xEE	; 238
 21a:	5a df       	rcall	.-332    	; 0xd0 <SPI_tranceive>
			spi_rdy = (spi_read == SPI_START);
 21c:	9c 2f       	mov	r25, r28
 21e:	8a 3a       	cpi	r24, 0xAA	; 170
 220:	19 f0       	breq	.+6      	; 0x228 <main+0x3a>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 c0       	rjmp	.+2      	; 0x228 <main+0x3a>
	direction_controller(0);
	
	while(1) {
		
		
		spi_rdy = 0;
 226:	90 e0       	ldi	r25, 0x00	; 0
		
		// SPI wait for start byte from central module
		while (spi_rdy == 0) {
 228:	99 23       	and	r25, r25
 22a:	b1 f3       	breq	.-20     	; 0x218 <main+0x2a>
			spi_read = SPI_tranceive(SPI_ACK);
			spi_rdy = (spi_read == SPI_START);
			
		}
		
		read_data_send_check();
 22c:	57 df       	rcall	.-338    	; 0xdc <read_data_send_check>
		
		// Check if communication was a success
		spi_success = SPI_tranceive(SPI_NAN) == SPI_FINISHED;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	4f df       	rcall	.-354    	; 0xd0 <SPI_tranceive>
		
		if (spi_success) {
 232:	86 36       	cpi	r24, 0x66	; 102
 234:	c1 f7       	brne	.-16     	; 0x226 <main+0x38>

			speed_controller(speed_cm);
 236:	80 91 02 01 	lds	r24, 0x0102
 23a:	97 df       	rcall	.-210    	; 0x16a <speed_controller>
			direction_controller(angle_cm);
 23c:	80 91 01 01 	lds	r24, 0x0101
 240:	b7 df       	rcall	.-146    	; 0x1b0 <direction_controller>
	direction_controller(0);
	
	while(1) {
		
		
		spi_rdy = 0;
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	f1 cf       	rjmp	.-30     	; 0x228 <main+0x3a>

00000246 <__fixunssfsi>:
 246:	70 d0       	rcall	.+224    	; 0x328 <__fp_splitA>
 248:	88 f0       	brcs	.+34     	; 0x26c <__fixunssfsi+0x26>
 24a:	9f 57       	subi	r25, 0x7F	; 127
 24c:	90 f0       	brcs	.+36     	; 0x272 <__fixunssfsi+0x2c>
 24e:	b9 2f       	mov	r27, r25
 250:	99 27       	eor	r25, r25
 252:	b7 51       	subi	r27, 0x17	; 23
 254:	a0 f0       	brcs	.+40     	; 0x27e <__fixunssfsi+0x38>
 256:	d1 f0       	breq	.+52     	; 0x28c <__fixunssfsi+0x46>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	1a f0       	brmi	.+6      	; 0x268 <__fixunssfsi+0x22>
 262:	ba 95       	dec	r27
 264:	c9 f7       	brne	.-14     	; 0x258 <__fixunssfsi+0x12>
 266:	12 c0       	rjmp	.+36     	; 0x28c <__fixunssfsi+0x46>
 268:	b1 30       	cpi	r27, 0x01	; 1
 26a:	81 f0       	breq	.+32     	; 0x28c <__fixunssfsi+0x46>
 26c:	77 d0       	rcall	.+238    	; 0x35c <__fp_zero>
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	08 95       	ret
 272:	74 c0       	rjmp	.+232    	; 0x35c <__fp_zero>
 274:	67 2f       	mov	r22, r23
 276:	78 2f       	mov	r23, r24
 278:	88 27       	eor	r24, r24
 27a:	b8 5f       	subi	r27, 0xF8	; 248
 27c:	39 f0       	breq	.+14     	; 0x28c <__fixunssfsi+0x46>
 27e:	b9 3f       	cpi	r27, 0xF9	; 249
 280:	cc f3       	brlt	.-14     	; 0x274 <__fixunssfsi+0x2e>
 282:	86 95       	lsr	r24
 284:	77 95       	ror	r23
 286:	67 95       	ror	r22
 288:	b3 95       	inc	r27
 28a:	d9 f7       	brne	.-10     	; 0x282 <__fixunssfsi+0x3c>
 28c:	3e f4       	brtc	.+14     	; 0x29c <__fixunssfsi+0x56>
 28e:	90 95       	com	r25
 290:	80 95       	com	r24
 292:	70 95       	com	r23
 294:	61 95       	neg	r22
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	8f 4f       	sbci	r24, 0xFF	; 255
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__floatunsisf>:
 29e:	e8 94       	clt
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <__floatsisf+0x12>

000002a2 <__floatsisf>:
 2a2:	97 fb       	bst	r25, 7
 2a4:	3e f4       	brtc	.+14     	; 0x2b4 <__floatsisf+0x12>
 2a6:	90 95       	com	r25
 2a8:	80 95       	com	r24
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	8f 4f       	sbci	r24, 0xFF	; 255
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	99 23       	and	r25, r25
 2b6:	a9 f0       	breq	.+42     	; 0x2e2 <__floatsisf+0x40>
 2b8:	f9 2f       	mov	r31, r25
 2ba:	96 e9       	ldi	r25, 0x96	; 150
 2bc:	bb 27       	eor	r27, r27
 2be:	93 95       	inc	r25
 2c0:	f6 95       	lsr	r31
 2c2:	87 95       	ror	r24
 2c4:	77 95       	ror	r23
 2c6:	67 95       	ror	r22
 2c8:	b7 95       	ror	r27
 2ca:	f1 11       	cpse	r31, r1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <__floatsisf+0x1c>
 2ce:	fa f4       	brpl	.+62     	; 0x30e <__floatsisf+0x6c>
 2d0:	bb 0f       	add	r27, r27
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <__floatsisf+0x36>
 2d4:	60 ff       	sbrs	r22, 0
 2d6:	1b c0       	rjmp	.+54     	; 0x30e <__floatsisf+0x6c>
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	16 c0       	rjmp	.+44     	; 0x30e <__floatsisf+0x6c>
 2e2:	88 23       	and	r24, r24
 2e4:	11 f0       	breq	.+4      	; 0x2ea <__floatsisf+0x48>
 2e6:	96 e9       	ldi	r25, 0x96	; 150
 2e8:	11 c0       	rjmp	.+34     	; 0x30c <__floatsisf+0x6a>
 2ea:	77 23       	and	r23, r23
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <__floatsisf+0x54>
 2ee:	9e e8       	ldi	r25, 0x8E	; 142
 2f0:	87 2f       	mov	r24, r23
 2f2:	76 2f       	mov	r23, r22
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <__floatsisf+0x5e>
 2f6:	66 23       	and	r22, r22
 2f8:	71 f0       	breq	.+28     	; 0x316 <__floatsisf+0x74>
 2fa:	96 e8       	ldi	r25, 0x86	; 134
 2fc:	86 2f       	mov	r24, r22
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	2a f0       	brmi	.+10     	; 0x30e <__floatsisf+0x6c>
 304:	9a 95       	dec	r25
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	88 1f       	adc	r24, r24
 30c:	da f7       	brpl	.-10     	; 0x304 <__floatsisf+0x62>
 30e:	88 0f       	add	r24, r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	97 f9       	bld	r25, 7
 316:	08 95       	ret

00000318 <__fp_split3>:
 318:	57 fd       	sbrc	r21, 7
 31a:	90 58       	subi	r25, 0x80	; 128
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	59 f0       	breq	.+22     	; 0x338 <__fp_splitA+0x10>
 322:	5f 3f       	cpi	r21, 0xFF	; 255
 324:	71 f0       	breq	.+28     	; 0x342 <__fp_splitA+0x1a>
 326:	47 95       	ror	r20

00000328 <__fp_splitA>:
 328:	88 0f       	add	r24, r24
 32a:	97 fb       	bst	r25, 7
 32c:	99 1f       	adc	r25, r25
 32e:	61 f0       	breq	.+24     	; 0x348 <__fp_splitA+0x20>
 330:	9f 3f       	cpi	r25, 0xFF	; 255
 332:	79 f0       	breq	.+30     	; 0x352 <__fp_splitA+0x2a>
 334:	87 95       	ror	r24
 336:	08 95       	ret
 338:	12 16       	cp	r1, r18
 33a:	13 06       	cpc	r1, r19
 33c:	14 06       	cpc	r1, r20
 33e:	55 1f       	adc	r21, r21
 340:	f2 cf       	rjmp	.-28     	; 0x326 <__fp_split3+0xe>
 342:	46 95       	lsr	r20
 344:	f1 df       	rcall	.-30     	; 0x328 <__fp_splitA>
 346:	08 c0       	rjmp	.+16     	; 0x358 <__fp_splitA+0x30>
 348:	16 16       	cp	r1, r22
 34a:	17 06       	cpc	r1, r23
 34c:	18 06       	cpc	r1, r24
 34e:	99 1f       	adc	r25, r25
 350:	f1 cf       	rjmp	.-30     	; 0x334 <__fp_splitA+0xc>
 352:	86 95       	lsr	r24
 354:	71 05       	cpc	r23, r1
 356:	61 05       	cpc	r22, r1
 358:	08 94       	sec
 35a:	08 95       	ret

0000035c <__fp_zero>:
 35c:	e8 94       	clt

0000035e <__fp_szero>:
 35e:	bb 27       	eor	r27, r27
 360:	66 27       	eor	r22, r22
 362:	77 27       	eor	r23, r23
 364:	cb 01       	movw	r24, r22
 366:	97 f9       	bld	r25, 7
 368:	08 95       	ret

0000036a <__mulsf3>:
 36a:	0b d0       	rcall	.+22     	; 0x382 <__mulsf3x>
 36c:	78 c0       	rjmp	.+240    	; 0x45e <__fp_round>
 36e:	69 d0       	rcall	.+210    	; 0x442 <__fp_pscA>
 370:	28 f0       	brcs	.+10     	; 0x37c <__mulsf3+0x12>
 372:	6e d0       	rcall	.+220    	; 0x450 <__fp_pscB>
 374:	18 f0       	brcs	.+6      	; 0x37c <__mulsf3+0x12>
 376:	95 23       	and	r25, r21
 378:	09 f0       	breq	.+2      	; 0x37c <__mulsf3+0x12>
 37a:	5a c0       	rjmp	.+180    	; 0x430 <__fp_inf>
 37c:	5f c0       	rjmp	.+190    	; 0x43c <__fp_nan>
 37e:	11 24       	eor	r1, r1
 380:	ee cf       	rjmp	.-36     	; 0x35e <__fp_szero>

00000382 <__mulsf3x>:
 382:	ca df       	rcall	.-108    	; 0x318 <__fp_split3>
 384:	a0 f3       	brcs	.-24     	; 0x36e <__mulsf3+0x4>

00000386 <__mulsf3_pse>:
 386:	95 9f       	mul	r25, r21
 388:	d1 f3       	breq	.-12     	; 0x37e <__mulsf3+0x14>
 38a:	95 0f       	add	r25, r21
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	55 1f       	adc	r21, r21
 390:	62 9f       	mul	r22, r18
 392:	f0 01       	movw	r30, r0
 394:	72 9f       	mul	r23, r18
 396:	bb 27       	eor	r27, r27
 398:	f0 0d       	add	r31, r0
 39a:	b1 1d       	adc	r27, r1
 39c:	63 9f       	mul	r22, r19
 39e:	aa 27       	eor	r26, r26
 3a0:	f0 0d       	add	r31, r0
 3a2:	b1 1d       	adc	r27, r1
 3a4:	aa 1f       	adc	r26, r26
 3a6:	64 9f       	mul	r22, r20
 3a8:	66 27       	eor	r22, r22
 3aa:	b0 0d       	add	r27, r0
 3ac:	a1 1d       	adc	r26, r1
 3ae:	66 1f       	adc	r22, r22
 3b0:	82 9f       	mul	r24, r18
 3b2:	22 27       	eor	r18, r18
 3b4:	b0 0d       	add	r27, r0
 3b6:	a1 1d       	adc	r26, r1
 3b8:	62 1f       	adc	r22, r18
 3ba:	73 9f       	mul	r23, r19
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	62 1f       	adc	r22, r18
 3c2:	83 9f       	mul	r24, r19
 3c4:	a0 0d       	add	r26, r0
 3c6:	61 1d       	adc	r22, r1
 3c8:	22 1f       	adc	r18, r18
 3ca:	74 9f       	mul	r23, r20
 3cc:	33 27       	eor	r19, r19
 3ce:	a0 0d       	add	r26, r0
 3d0:	61 1d       	adc	r22, r1
 3d2:	23 1f       	adc	r18, r19
 3d4:	84 9f       	mul	r24, r20
 3d6:	60 0d       	add	r22, r0
 3d8:	21 1d       	adc	r18, r1
 3da:	82 2f       	mov	r24, r18
 3dc:	76 2f       	mov	r23, r22
 3de:	6a 2f       	mov	r22, r26
 3e0:	11 24       	eor	r1, r1
 3e2:	9f 57       	subi	r25, 0x7F	; 127
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	8a f0       	brmi	.+34     	; 0x40a <__mulsf3_pse+0x84>
 3e8:	e1 f0       	breq	.+56     	; 0x422 <__mulsf3_pse+0x9c>
 3ea:	88 23       	and	r24, r24
 3ec:	4a f0       	brmi	.+18     	; 0x400 <__mulsf3_pse+0x7a>
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	bb 1f       	adc	r27, r27
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	91 50       	subi	r25, 0x01	; 1
 3fc:	50 40       	sbci	r21, 0x00	; 0
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <__mulsf3_pse+0x64>
 400:	9e 3f       	cpi	r25, 0xFE	; 254
 402:	51 05       	cpc	r21, r1
 404:	70 f0       	brcs	.+28     	; 0x422 <__mulsf3_pse+0x9c>
 406:	14 c0       	rjmp	.+40     	; 0x430 <__fp_inf>
 408:	aa cf       	rjmp	.-172    	; 0x35e <__fp_szero>
 40a:	5f 3f       	cpi	r21, 0xFF	; 255
 40c:	ec f3       	brlt	.-6      	; 0x408 <__mulsf3_pse+0x82>
 40e:	98 3e       	cpi	r25, 0xE8	; 232
 410:	dc f3       	brlt	.-10     	; 0x408 <__mulsf3_pse+0x82>
 412:	86 95       	lsr	r24
 414:	77 95       	ror	r23
 416:	67 95       	ror	r22
 418:	b7 95       	ror	r27
 41a:	f7 95       	ror	r31
 41c:	e7 95       	ror	r30
 41e:	9f 5f       	subi	r25, 0xFF	; 255
 420:	c1 f7       	brne	.-16     	; 0x412 <__mulsf3_pse+0x8c>
 422:	fe 2b       	or	r31, r30
 424:	88 0f       	add	r24, r24
 426:	91 1d       	adc	r25, r1
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	97 f9       	bld	r25, 7
 42e:	08 95       	ret

00000430 <__fp_inf>:
 430:	97 f9       	bld	r25, 7
 432:	9f 67       	ori	r25, 0x7F	; 127
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	08 95       	ret

0000043c <__fp_nan>:
 43c:	9f ef       	ldi	r25, 0xFF	; 255
 43e:	80 ec       	ldi	r24, 0xC0	; 192
 440:	08 95       	ret

00000442 <__fp_pscA>:
 442:	00 24       	eor	r0, r0
 444:	0a 94       	dec	r0
 446:	16 16       	cp	r1, r22
 448:	17 06       	cpc	r1, r23
 44a:	18 06       	cpc	r1, r24
 44c:	09 06       	cpc	r0, r25
 44e:	08 95       	ret

00000450 <__fp_pscB>:
 450:	00 24       	eor	r0, r0
 452:	0a 94       	dec	r0
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	14 06       	cpc	r1, r20
 45a:	05 06       	cpc	r0, r21
 45c:	08 95       	ret

0000045e <__fp_round>:
 45e:	09 2e       	mov	r0, r25
 460:	03 94       	inc	r0
 462:	00 0c       	add	r0, r0
 464:	11 f4       	brne	.+4      	; 0x46a <__fp_round+0xc>
 466:	88 23       	and	r24, r24
 468:	52 f0       	brmi	.+20     	; 0x47e <__fp_round+0x20>
 46a:	bb 0f       	add	r27, r27
 46c:	40 f4       	brcc	.+16     	; 0x47e <__fp_round+0x20>
 46e:	bf 2b       	or	r27, r31
 470:	11 f4       	brne	.+4      	; 0x476 <__fp_round+0x18>
 472:	60 ff       	sbrs	r22, 0
 474:	04 c0       	rjmp	.+8      	; 0x47e <__fp_round+0x20>
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	08 95       	ret

00000480 <_exit>:
 480:	f8 94       	cli

00000482 <__stop_program>:
 482:	ff cf       	rjmp	.-2      	; 0x482 <__stop_program>
