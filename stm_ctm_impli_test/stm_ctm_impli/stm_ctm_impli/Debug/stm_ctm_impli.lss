
stm_ctm_impli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000117  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d2  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011e  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000199  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000088  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__vector_19>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4f c0       	rjmp	.+158    	; 0x13a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	DDRD |= 0xFF; // Make all the PD pins as output.
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
		
    //PWM fas mode configuration. 
	TCCR1A |=   (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
  a4:	e0 e8       	ldi	r30, 0x80	; 128
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8a 6f       	ori	r24, 0xFA	; 250
  ac:	80 83       	st	Z, r24
	TCCR1B |=  (0<<WGM10) | (1<<WGM11) | (1<<WGM12) | (1<<WGM13);
  ae:	e1 e8       	ldi	r30, 0x81	; 129
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8a 61       	ori	r24, 0x1A	; 26
  b6:	80 83       	st	Z, r24
	ICR1 = 19999 ;
  b8:	e6 e8       	ldi	r30, 0x86	; 134
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24

	//Speed and directions constants.  
	unsigned int NEUTRAL = ICR1 -1400; // 1.43ms
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	88 57       	subi	r24, 0x78	; 120
  ca:	95 40       	sbci	r25, 0x05	; 5
	unsigned int LEFT = ICR1 - 1210;
  cc:	20 81       	ld	r18, Z
  ce:	31 81       	ldd	r19, Z+1	; 0x01
	unsigned int RIGHT= ICR1 -1650;
  d0:	20 81       	ld	r18, Z
  d2:	31 81       	ldd	r19, Z+1	; 0x01
	
	// speed variable. 
	OCR1A = NEUTRAL;
  d4:	90 93 89 00 	sts	0x0089, r25
  d8:	80 93 88 00 	sts	0x0088, r24
	// directions variable. 
	OCR1B = NEUTRAL;
  dc:	90 93 8b 00 	sts	0x008B, r25
  e0:	80 93 8a 00 	sts	0x008A, r24
	}

    


	sei(); //  enable global interrupt.
  e4:	78 94       	sei
	OCR1A = NEUTRAL;// speed inti.
  e6:	90 93 89 00 	sts	0x0089, r25
  ea:	80 93 88 00 	sts	0x0088, r24
	OCR1B = NEUTRAL;// speed inti.
  ee:	90 93 8b 00 	sts	0x008B, r25
  f2:	80 93 8a 00 	sts	0x008A, r24
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x58>

000000f8 <__vector_19>:
	return 0;
}


//.
 ISR(SPI_STC_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	0b b6       	in	r0, 0x3b	; 59
 104:	0f 92       	push	r0
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31

		// ode to execute
		// whenever transmission/reception 
		// is complete 
		unsigned int b = SPDR;
 110:	2e b5       	in	r18, 0x2e	; 46
		OCR1A += b;
 112:	e8 e8       	ldi	r30, 0x88	; 136
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	82 0f       	add	r24, r18
 11c:	91 1d       	adc	r25, r1
 11e:	91 83       	std	Z+1, r25	; 0x01
 120:	80 83       	st	Z, r24

}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
