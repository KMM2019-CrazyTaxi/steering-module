
stm_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d5  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000089  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000118  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000148  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000063  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	72 c0       	rjmp	.+228    	; 0xf2 <__vector_3>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	48 c0       	rjmp	.+144    	; 0x12c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define F_CPU = 16000000UL


int main(void)
{	
	DDRD |= 0xFF;
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x00;
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= 0<<WGM10 | 1<<WGM11  | 1<<COM1A1 | 1<<COM1B1  ;
  a8:	e0 e8       	ldi	r30, 0x80	; 128
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 6a       	ori	r24, 0xA2	; 162
  b0:	80 83       	st	Z, r24
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10 ;
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	89 61       	ori	r24, 0x19	; 25
  ba:	80 83       	st	Z, r24
	ICR1 = 19999;
  bc:	e6 e8       	ldi	r30, 0x86	; 134
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	9e e4       	ldi	r25, 0x4E	; 78
  c4:	91 83       	std	Z+1, r25	; 0x01
  c6:	80 83       	st	Z, r24
	
	unsigned int NEUTRAL = ICR1 - 190;
  c8:	80 81       	ld	r24, Z
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	8e 5b       	subi	r24, 0xBE	; 190
  ce:	91 09       	sbc	r25, r1
	unsigned int FULL_REVERSE = ICR1 - 125;
  d0:	20 81       	ld	r18, Z
  d2:	31 81       	ldd	r19, Z+1	; 0x01
	unsigned int FULL_FORWARD = ICR1 - 250;
  d4:	20 81       	ld	r18, Z
  d6:	31 81       	ldd	r19, Z+1	; 0x01
	
	EICRA |= 1<<ISC20 | 1<<ISC21;
  d8:	e9 e6       	ldi	r30, 0x69	; 105
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	20 81       	ld	r18, Z
  de:	20 63       	ori	r18, 0x30	; 48
  e0:	20 83       	st	Z, r18
	EIMSK |= 1<<INT2;
  e2:	ea 9a       	sbi	0x1d, 2	; 29
	EIFR |= 1<<INTF2;
  e4:	e2 9a       	sbi	0x1c, 2	; 28
	sei();               // Enable global interrupts
  e6:	78 94       	sei
	
	OCR1A = NEUTRAL;
  e8:	90 93 89 00 	sts	0x0089, r25
  ec:	80 93 88 00 	sts	0x0088, r24
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x52>

000000f2 <__vector_3>:
    {
    }
}

ISR(INT2_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	0b b6       	in	r0, 0x3b	; 59
  fe:	0f 92       	push	r0
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	OCR1A -= 1;
 108:	e8 e8       	ldi	r30, 0x88	; 136
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	91 83       	std	Z+1, r25	; 0x01
 114:	80 83       	st	Z, r24
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0b be       	out	0x3b, r0	; 59
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
