
stm_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001db  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  00000413  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ee  00000000  00000000  0000050f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000192  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000063  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__vector_3>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	76 c0       	rjmp	.+236    	; 0x188 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:



int main(void)
{	
	DDRD |= 0xFF;
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A |=   (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | (1<<COM1B0 |1<<COM1B1) | (1<<COM1A0 |1<<COM1A1);
  a4:	e0 e8       	ldi	r30, 0x80	; 128
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8a 6f       	ori	r24, 0xFA	; 250
  ac:	80 83       	st	Z, r24
	TCCR1B |=  (0<<WGM10) | (1<<WGM11) | (1<<WGM12) | (1<<WGM13);
  ae:	e1 e8       	ldi	r30, 0x81	; 129
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8a 61       	ori	r24, 0x1A	; 26
  b6:	80 83       	st	Z, r24
	ICR1 = 19999 ;
  b8:	e6 e8       	ldi	r30, 0x86	; 134
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
	
	
		
	unsigned int NEUTRAL = ICR1 -1400; // 1.43ms
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	88 57       	subi	r24, 0x78	; 120
  ca:	95 40       	sbci	r25, 0x05	; 5
	unsigned int LEFT = ICR1 - 1210;
  cc:	40 81       	ld	r20, Z
  ce:	51 81       	ldd	r21, Z+1	; 0x01
  d0:	4a 5b       	subi	r20, 0xBA	; 186
  d2:	54 40       	sbci	r21, 0x04	; 4
	unsigned int RIGHT= ICR1 -1650;
  d4:	20 81       	ld	r18, Z
  d6:	31 81       	ldd	r19, Z+1	; 0x01
  d8:	22 57       	subi	r18, 0x72	; 114
  da:	36 40       	sbci	r19, 0x06	; 6
	
	EICRA |= 1<<ISC20 | 1<<ISC21;
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	60 81       	ld	r22, Z
  e2:	60 63       	ori	r22, 0x30	; 48
  e4:	60 83       	st	Z, r22
	EIMSK |= 1<<INT2;
  e6:	ea 9a       	sbi	0x1d, 2	; 29
	EIFR |= 1<<INTF2;
  e8:	e2 9a       	sbi	0x1c, 2	; 28
	sei();               // Enable global interrupts
  ea:	78 94       	sei
	
	OCR1A = NEUTRAL;
  ec:	90 93 89 00 	sts	0x0089, r25
  f0:	80 93 88 00 	sts	0x0088, r24
	OCR1B = NEUTRAL;
  f4:	90 93 8b 00 	sts	0x008B, r25
  f8:	80 93 8a 00 	sts	0x008A, r24
	
    while(1)
    {
			OCR1A = NEUTRAL;
  fc:	a8 e8       	ldi	r26, 0x88	; 136
  fe:	b0 e0       	ldi	r27, 0x00	; 0
			OCR1B = NEUTRAL;
 100:	ea e8       	ldi	r30, 0x8A	; 138
 102:	f0 e0       	ldi	r31, 0x00	; 0
	OCR1A = NEUTRAL;
	OCR1B = NEUTRAL;
	
    while(1)
    {
			OCR1A = NEUTRAL;
 104:	11 96       	adiw	r26, 0x01	; 1
 106:	9c 93       	st	X, r25
 108:	8e 93       	st	-X, r24
			OCR1B = NEUTRAL;
 10a:	91 83       	std	Z+1, r25	; 0x01
 10c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	6f ef       	ldi	r22, 0xFF	; 255
 110:	7b e7       	ldi	r23, 0x7B	; 123
 112:	c2 e9       	ldi	r28, 0x92	; 146
 114:	61 50       	subi	r22, 0x01	; 1
 116:	70 40       	sbci	r23, 0x00	; 0
 118:	c0 40       	sbci	r28, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x76>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x80>
 11e:	00 00       	nop
		_delay_ms(3000);
				OCR1B = LEFT;
 120:	51 83       	std	Z+1, r21	; 0x01
 122:	40 83       	st	Z, r20
 124:	6f ef       	ldi	r22, 0xFF	; 255
 126:	79 e6       	ldi	r23, 0x69	; 105
 128:	c8 e1       	ldi	r28, 0x18	; 24
 12a:	61 50       	subi	r22, 0x01	; 1
 12c:	70 40       	sbci	r23, 0x00	; 0
 12e:	c0 40       	sbci	r28, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x8c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x96>
 134:	00 00       	nop
		_delay_ms(500);
						OCR1B = RIGHT;
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18
 13a:	6f ef       	ldi	r22, 0xFF	; 255
 13c:	71 ee       	ldi	r23, 0xE1	; 225
 13e:	c4 e0       	ldi	r28, 0x04	; 4
 140:	61 50       	subi	r22, 0x01	; 1
 142:	70 40       	sbci	r23, 0x00	; 0
 144:	c0 40       	sbci	r28, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xa2>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xac>
 14a:	00 00       	nop
 14c:	db cf       	rjmp	.-74     	; 0x104 <main+0x66>

0000014e <__vector_3>:
		
    }
}

ISR(INT2_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	0b b6       	in	r0, 0x3b	; 59
 15a:	0f 92       	push	r0
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	OCR1A -=10;
 164:	e8 e8       	ldi	r30, 0x88	; 136
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	0a 97       	sbiw	r24, 0x0a	; 10
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
